#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include "mytar.h"

extern char *use;

/*
 * CURRENT ISSUES:
 * - I need to change the error checking -> Only one return!!!!
 * 
*/

/** Copy nBytes bytes from the origin file to the destination file.
 *
 * origin: pointer to the FILE descriptor associated with the origin file
 * destination:  pointer to the FILE descriptor associated with the destination file
 * nBytes: number of bytes to copy
 *
 * Returns the number of bytes actually copied or -1 if an error occured.
 */
int
copynFile(FILE * origin, FILE * destination, int nBytes)
{
	int mybyte = 0;
	int bytes_copied = 0;

	//Iterate until the required amount of bytes is copied, or until we find and EOF on the origin
	while (	bytes_copied < nBytes &&
		(mybyte = getc(origin))!=EOF){
			putc(mybyte, destination);
			bytes_copied ++;
				
	}

	//If not all required bytes were copied, return an error
	if ((nBytes != INT_MAX) && (bytes_copied < nBytes)) {
		bytes_copied = -1;
	}

	return bytes_copied;
}

/** Loads a string from a file.
 *
 * file: pointer to the FILE descriptor 
 * buf: parameter to return the read string. Buf is a
 * string passed by reference. 
 * 
 * The loadstr() function must allocate memory from the heap to store 
 * the contents of the string read from the FILE. 
 * Once the string has been properly "built" in memory, return the starting 
 * address of the string (pointer returned by malloc()) in the buf parameter
 * (*buf)=<address>;
 * 
 * Returns: 0 if success, -1 if error
 */
void resize(int* max, char **buf) {
	int newMax = *max * 2;
	char *newBuf = malloc(sizeof(char) * newMax );

	int i = 0;
	for (i = 0; i < *max; i++) {
		newBuf[i] = *buf[i];
	}

	(*buf) = newBuf;
	(*max) = newMax;
}

int
loadstr(FILE * file, char **buf)
{
	int maxChars = 50;
	char *string = malloc(sizeof(char) * maxChars);
	
	char byteRead = 0;

	int i = 0;
	while ((byteRead = getc(file)) != '\0') {
		if (i >= maxChars) {
			//Double the size of the string
			resize(&maxChars, &string);		
		}
		string[i] = byteRead;
		i++;
	}

	(*buf) = string;

	return 0;
}

/** Read tarball header and store it in memory.
 *
 * tarFile: pointer to the tarball's FILE descriptor 
 * header: output parameter. It is used to return the starting memory address
 * of an array that contains the (name,size) pairs read from the tar file
 * nFiles: output parameter. Used to return the number of files stored in
 * the tarball archive (first 4 bytes of the header)
 *
 * On success it returns EXIT_SUCCESS. Upon failure, EXIT_FAILURE is returned.
 * (both macros are defined in stdlib.h).
 */
int
readHeader(FILE * tarFile, stHeaderEntry ** header, int *nFiles)
{
	int numFiles = 0;
	fread(&numFiles, sizeof(int), 1, tarFile);

	//Allocate memory to be able to return the array of headers.
	stHeaderEntry* headers = malloc(sizeof(stHeaderEntry) * numFiles); 
		
	int index;
	for (index = 0; index < numFiles; index++) {
		
		//Read Header
		loadstr(tarFile, &headers[index].name);
		fread(&headers[index].size, sizeof(int), 1, tarFile);

	}

	(*header) = headers;
	(*nFiles) = numFiles;
	
	return EXIT_SUCCESS;
}

/** Creates a tarball archive 
 *
 * nfiles: number of files to be stored in the tarball
 * filenames: array with the path names of the files to be included in the tarball
 *		The actual names, not pointers to the names.
 * tarname: name of the tarball archive
 * 
 * On success, it returns EXIT_SUCCESS; upon error it returns EXIT_FAILURE. 
 * (macros defined in stdlib.h).
 *
 * HINTS: First reserve room in the file to store the tarball header.
 * Move the file's position indicator to the data section (skip the header)
 * and dump the contents of the source files (one by one) in the tarball archive. 
 * At the same time, build the representation of the tarball header in memory.
 * Finally, rewind the file's position indicator, write the number of files as well as 
 * the (file name,file size) pairs in the tar archive.
 *
 * Important reminder: to calculate the room needed for the header, a simple sizeof 
 * of stHeaderEntry will not work. Bear in mind that, on disk, file names found in (name,size) 
 * pairs occupy strlen(name)+1 bytes.
 *
 */
int
createTar(int nFiles, char *fileNames[], char tarName[])
{

	stHeaderEntry headers[nFiles];
	FILE* tarWritingPtr =  fopen(tarName, "w");

	//Create the writing cursor and place it in the start of the data section.
	int offset = sizeof(int);
	int i = 0;
	for (; i < nFiles; i++) {
		offset += strlen(fileNames[i]) + 1;
	}
	if (fseek(tarWritingPtr, offset, SEEK_SET) < 0) {return EXIT_FAILURE;}

	//Copy the data and get the header information
	int t;
	for (t = 0; t < nFiles; t++) {
		//Initialize the field of filename in the header array
		headers[t].name = malloc(strlen(fileNames[t]));
		//Copy the name of the file from the filenames to the 
		strcpy(headers[t].name, fileNames[t]);

		//Open the file to be copied
		FILE* original = fopen(headers[t].name, "r");
		if (original == NULL) { return EXIT_FAILURE; }

		//Actually copy the file contents
		headers[t].size = copynFile(original, tarWritingPtr, INT_MAX);


		if (headers[t].size != -1) {
			offset += headers[t].size;
		} else {
			return EXIT_FAILURE;
		}
		
		
		fclose(original);
	}

	//Write the header
	
	if (fseek(tarWritingPtr, 0, SEEK_SET) < 0) {return EXIT_FAILURE;}
	fwrite(&nFiles, sizeof(int), 1, tarWritingPtr); //Number of files

	for(t = 0; t < nFiles; t++) { //Headers
		//Write the filename
		fwrite(headers[t].name, strlen(headers[t].name), 1, tarWritingPtr);
		putc('\0', tarWritingPtr);
			
		//Write the size
		fwrite(&headers[t].size, sizeof(int), 1, tarWritingPtr);	
	}

	//Free up the memory reserved
	for(t = 0; t < nFiles; t++) {
		free(headers[t].name);		
	}
	fclose(tarWritingPtr);
	
	return EXIT_SUCCESS;
}

/** Extract files stored in a tarball archive
 *
 * tarName: tarball's pathname
 *
 * On success, it returns EXIT_SUCCESS; upon error it returns EXIT_FAILURE. 
 * (macros defined in stdlib.h).
 *
 * HINTS: First load the tarball's header into memory.
 * After reading the header, the file position indicator will be located at the 
 * tarball's data section. By using information from the 
 * header --number of files and (file name, file size) pairs--, extract files 
 * stored in the data section of the tarball.
 *
 */
int
extractTar(char tarName[])
{
	
	int numFiles = 0;
	stHeaderEntry *headers = NULL;
	//Open file for reading
	FILE *tarFile = fopen(tarName, "r");
	//Read the header
	readHeader(tarFile, &headers, &numFiles);

	//Display the header info
	printf("Header read correctly... Displaying info: \n");
	int index;
	for (index = 0; index < numFiles; index++) {		
		printf("Header entry %d: (%s, %d)\n", index, headers[index].name, headers[index].size);
	}

	//Create separate files and copy the contents from the tar.
	for (index = 0; index < numFiles; index++) {
		FILE *destination = fopen(headers[index].name, "w");

		copynFile(tarFile, destination, headers[index].size);

		fclose(destination);
	}

	//Close files and free up memory
	fclose(tarFile);
	free(headers);

	return EXIT_SUCCESS;
}
